providers:
  openai:
    name: "OpenAI"
    provider: "openai"
    description: "OpenAI API for LLMs and Embeddings"
    logo_url: "https://openai.com/logo.png"
    docs_url: "https://platform.openai.com/docs"
    base_url: "https://api.openai.com/v1"
    api_key_header: "Authorization"
    api_key_prefix: "Bearer"
    is_active: true
    support: ["embedding", "chat", "moderation"]
    tasks:
      embedding:
        class_path: "langchain_openai.embeddings.OpenAIEmbeddings"
        init_params: ["model", "api_key"]
      chat:
        class_path: "langchain_openai.ChatOpenAI"
        init_params: ["model", "api_key", "temperature"]

  openrouter:
    name: "OpenRouter"
    provider: "openrouter"
    description: "Multi-model proxy via OpenRouter"
    logo_url: "https://openrouter.ai/logo.png"
    docs_url: "https://openrouter.ai/docs"
    base_url: "https://openrouter.ai/api/v1"
    api_key_header: "Authorization"
    api_key_prefix: "Bearer"
    is_active: true
    support: ["chat"]
    tasks:
      chat:
        class_path: "langchain_openai.ChatOpenAI"
        init_params: ["model", "api_key"]

  huggingface:
    name: "HuggingFace"
    provider: "huggingface"
    description: "Embeddings via HuggingFace Inference API"
    logo_url: "https://huggingface.co/logo.png"
    docs_url: "https://huggingface.co/docs"
    base_url: "https://api-inference.huggingface.co"
    api_key_header: "Authorization"
    api_key_prefix: "Bearer"
    is_active: true
    support: ["embedding"]
    tasks:
      embedding:
        class_path: "langchain_huggingface.HuggingFaceEmbeddings"
        init_params: ["model_name"]

  google:
    name: "Google Vertex AI"
    provider: "google"
    description: "Google Generative AI API"
    logo_url: "https://cloud.google.com/vertex-ai/images/logo.png"
    docs_url: "https://cloud.google.com/vertex-ai/docs"
    base_url: "https://generativelanguage.googleapis.com/v1beta"
    api_key_header: "x-goog-api-key"
    api_key_prefix: ""
    is_active: false
    support: ["embedding", "chat"]
    tasks:
      embedding:
        class_path: "langchain_google_vertexai.embeddings.VertexAIEmbeddings"
        init_params: ["model", "project", "location"]
      chat:
        class_path: "langchain_google_vertexai.VertexAI"
        init_params: ["model", "project", "location", "temperature"]
